/// <reference types="node" />
import { Options as GlobbyOptions } from 'globby';
export declare const markdownExtensions: string[];
export interface FileConvertOption {
    extension?: string;
    page?: number;
}
export declare enum FileType {
    File = 0,
    StandardIO = 1,
    Null = 2
}
export declare class File {
    buffer?: Buffer;
    inputDir?: string;
    type: FileType;
    readonly path: string;
    constructor(filepath: string);
    get absolutePath(): string;
    get absoluteFileScheme(): string;
    convert(output: string | false | undefined, opts: FileConvertOption): File;
    load(): Promise<Buffer>;
    relativePath(from?: string): string;
    save(): Promise<void>;
    saveTmpFile(opts?: {
        extension?: string;
        home?: boolean;
    }): Promise<File.TmpFileInterface>;
    private cleanup;
    private convertName;
    private saveToFile;
    private static stdinBuffer?;
    static findPath(opts: GlobbyOptions, ...paths: string[]): Promise<string[]>;
    static find(...paths: string[]): Promise<File[]>;
    static findDir(directory: string): Promise<File[]>;
    static stdin(): Promise<File | undefined>;
    private static initialize;
}
export declare namespace File {
    interface TmpFileInterface {
        path: string;
        cleanup: () => Promise<void>;
    }
}
