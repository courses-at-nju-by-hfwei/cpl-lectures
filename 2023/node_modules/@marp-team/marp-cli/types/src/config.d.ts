import { ConverterOption } from './converter';
import { ResolvableEngine, ResolvedEngine } from './engine';
declare type Overwrite<T, U> = Omit<T, Extract<keyof T, keyof U>> & U;
interface IMarpCLIArguments {
    _?: string[];
    allowLocalFiles?: boolean;
    author?: string;
    baseUrl?: string;
    bespoke?: {
        osc?: boolean;
        progress?: boolean;
        transition?: boolean;
    };
    configFile?: string | false;
    description?: string;
    engine?: string;
    html?: boolean;
    image?: string;
    images?: string;
    imageScale?: number;
    inputDir?: string;
    jpegQuality?: number;
    keywords?: string;
    notes?: boolean;
    ogImage?: string;
    output?: string | false;
    pdf?: boolean;
    pdfNotes?: boolean;
    pptx?: boolean;
    preview?: boolean;
    server?: boolean;
    template?: string;
    theme?: string;
    themeSet?: string[];
    title?: string;
    url?: string;
    watch?: boolean;
}
export declare type IMarpCLIConfig = Overwrite<Omit<IMarpCLIArguments, 'configFile' | '_'>, {
    engine?: ResolvableEngine | ResolvableEngine[];
    html?: ConverterOption['html'];
    keywords?: string | string[];
    lang?: string;
    options?: ConverterOption['options'];
    themeSet?: string | string[];
}>;
export declare class MarpCLIConfig {
    args: IMarpCLIArguments;
    conf: IMarpCLIConfig;
    confPath?: string;
    engine: ResolvedEngine;
    static moduleName: "marp";
    static fromArguments(args: IMarpCLIArguments): Promise<MarpCLIConfig>;
    private constructor();
    converterOption(): Promise<ConverterOption>;
    get files(): string[];
    private inputDir;
    private loadConf;
    private loadTheme;
}
declare const _default: typeof MarpCLIConfig.fromArguments;
export default _default;
