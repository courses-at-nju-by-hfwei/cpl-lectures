section
  h1(style="font-variant: small-caps") Variables, Types, IO
  hr

  br
  h4 Hengfeng Wei
  h4 <u>hfwei@nju.edu.cn</u>

  //- br
  img(src = "./1-io/figs/C.png", alt = "The C Programming Language",
      width = 200, height = auto)
  p Oct. 11, 2021

section
  h2 Overview
  hr

  br
  p Variables (变量) &emsp; Constants (常量)
  p Data Types (数据类型)
  br
  p Operators (运算符) &emsp; Expressions (表达式)
  p Assignment Statements (赋值语句)
  br
  p I/O (Input/Output; 输入输出)

section
  h2 "Talk is Cheap. Show me the Code."
  hr

  br
  img(src = "./0-intro/figs/lets-code.jpeg" alt = "Let's Code"
    width = 600 height = auto)

  br
  p <code>circle.c sphere.c mol.c admin.c</code>

section
  h2 Circle
  hr

  br
  p Given a radius ($10$) of a circle,
  p to compute its circumference and area.

  p $L = 2\pi r$ &emsp; $S = \pi r^2$

  br
  ul
    li 每个结果各占一行
    li 小数点后保留两位

section
  h2 Declaration (声明)
  hr

  br
  p <code><mark>int radius = 10;</mark></code>

  br
  ul
    li.fragment Introduce a <em>variable</em> called <code>radius</code>.
    li.fragment You can use <code>radius</code> later.
    li.fragment The type of <code>radius</code> is <code>int</code> (integer).
    li.fragment <code>radius</code> is <em>initialized</em> (初始化) to <code>10</code>.
    li.fragment You can <em>assign</em> (赋值) other values to <code>radius</code>.
    li.fragment <code>radius</code> refers to a <em>location</em> (<code>&radius</code>) in memory.

section
  h2 Definition (定义)
  hr

  br
  p <code><mark>int radius = 10;</mark></code> is also a <em>definition</em>.

  br
  p.fragment Any definitions are declarations.
  p.fragment <del>All declarations are definitions</del> (at least for now).

section
  h2 Identifiers (标识符)
  hr

  br
  p <code><mark>int radius = 10;</mark></code>

  br
  p The name <code>radius</code> is an <em>identifier</em>.

  br
  ul
    li made up of letters, numbers, and underscores
    li do <em>not</em> start with a number

section
  h2 Identifiers
  hr

  br
  br
  ul
    li Use meaningful identifiers
    li <code>surface_area</code> <em>vs.</em> <code>surfaceArea</code>

section
  h2 Operators and Expressions
  hr

  br
  p <code>double circumference = <mark>2 * PI * radius</mark>;</code>

section
  h2 Assignment Statements
  hr

  br
  p <code>double circumference = 0;</code>
  br
  p <code><mark>circumference = 2 * PI * radius</mark>;</code>

section
  h2 Sphere
  hr

  p Given a radius ($100$) of a sphere,
  p to compute its surface area and volume.

  p $A = 4 \pi r^2$ &emsp; $V = \frac{4}{3} \pi r^3$

  br
  ul
    li 每个结果各占一行
    li 小数点后保留四位
    li 每个结果至少占$15$字符, 左对齐
      ul
        li <code>_______________ : surface_area</code>
        li <code>_______________ : volume</code>

section
  h2 mol
  hr

  br
  p $6$ 克氧气的物质的量是多少?

  br
  p $Q = 6 / 32 \times 6.02 \times 10^{23}$

  br
  p 两种格式输出, 结果均使用科学计数法表示
  ul
    li 第一行结果, 小数点后保留三位
    li 第二行结果, 保留五位有效数字

section
  h2 Data Types
  hr

  br
  ul
    li <code>int</code> ($\approx \mathbb{Z}$)
    li <code>double</code> ($\approx \mathbb{R}$)
    li <code>char</code> (Character; 字符)
    li <code>C string</code> (char array; 字符数组)

section
  h2 <code>int</code> $\approx \mathbb{Z}$
  hr

  br
  p <code>INT_MIN</code> &emsp; <code>INT_MAX</code>

  br
  p(class = "r-fit-text") <code>printf("INT_MIN = %d \t INT_MAX = %d\n", INT_MIN, INT_MAX);</code>

section
  h2 A (Naive) Administration System
  hr

  br
  <div class="row">
    <div class="column">
      ul
        li Name (EN)
        li Gender (F/M)
        li Birthday (mm-dd-yyyy)
        li Weekday (Xyz.)
    </div>
    <div class="column">
      ul
        li C
        li Music
        li Medicine
        li Mean (.d)
        li Standard Deviation (.dd)
        li Ranking ($\%$)
    </div>
  </div>

section
  h2 A (Naive) Administration System
  hr

  br
  br
  ul
    li 每组信息占一行
    li 各项信息使用 "TAB" 间隔
    li 各项信息要遵循特定格式要求

section
  h2 罗大佑
  hr

  br
  img(src = "./1-io/figs/Luo.jpeg" alt = "Dayou Luo"
    width = 500 height = auto)

section
  h2 Data Types: <code>char</code>
  hr

  img(src = "./1-io/figs/ASCII.png" alt = "ASCII Table"
    width = 600 height = auto)

  ul
    li <code>isdigit isalpha isalnum</code>
    li <code>islower isupper tolower toupper</code>
    li <code>isspace</code> (including <code> , \n, \t</code>)

section
  h2 Data Types: <code>C string</code>
  hr

  br
  p <code><mark>char first_name[] = "Tayu";</mark></code>

  p A C string is an array of characters.
  p '\0': terminating null character
  p 'T', 'a', 'y', 'u', '\0'
  p.fragment <code>char first_name[5] = "Tayu";</code>
  p.fragment <code>char first_name[10] = "Tayu";</code>
  p.fragment <del><code>char first_name[2] = "Tayu";</code></del>

section
  h2 <code>printf</code>
  hr

  br
  code <mark>int printf(const char *format, ...);</mark>

  br
  br
  ul
    li <code>format</code>: format string (格式串)
    li <code>...</code>: variable argument list (可变长参数列表)

section
  h2 <code>printf</code>
  hr

  br
  code <mark>int printf(const char *format, ...);</mark>

  br
  br
  p The <code>format</code> string consists of
  ul
    li ordinary characters (not %)
    li conversion specifications (转换说明)
      ul
        li each of which is introduced by %

section
  h2 <code>printf</code>
  hr

  code <mark>int printf(const char *format, ...);</mark>
  p Escape sequence (转义序列)
  ul
    li.fragment <code>\n</code>: Newline
    li.fragment <code>\t</code>: Horizontal Tab
    li.fragment <code>\"</code>: Double quotation mark
    li.fragment <code>\'</code>: Single quotation mark
    li.fragment <code>\\</code>: Backslash
    li.fragment <code>\b</code>: Backspace
    //- li.fragment <code>\a</code>: Alert

section
  h2 <code>printf</code>
  hr

  br
  code <mark>int printf(const char *format, ...);</mark>

  br
  br
  table
    thead
      tr
        th %specifier
        th Argument
        th Output
    tbody
      tr
        td %d (%i)
        td int
        td decimal ([-]dddd)
      tr
        td %f
        td double
        td decimal ([-]ddd.ddd)
      tr
        td %e (%E)
        td double
        td decimal ([-]d.ddde[+-]dd)
      tr
        td %g (%G)
        td double
        td %f or %e

section
  h2 <code>printf</code>
  hr

  br
  code <mark>int printf(const char *format, ...);</mark>

  br
  br
  table
    thead
      tr
        th %specifier
        th Argument
        th Output
    tbody
      tr
        td %c
        td int
        td character
      tr
        td %s
        td pointer to a char array
        td string
      tr
        td %%
        td
        td %

section
  h2 <code>printf</code>
  hr

  br
  p "It is <mark>up to you</mark> to ensure that
  p the type of the actual argument
  p <mark><em>matches</em></mark> the type expected by conversion specifiers."

section
  h2 <code>printf</code>
  hr

  p <code>%[<mark>flags</mark>][width][.precision]specifier</code>
  code <mark>int printf(const char *format, ...);</mark>

  br
  br
  ul
    li <code>flags</code>
      ul
        li <code>-</code>: left-justified (otherwise, right-justified)
        li <code>+</code>: always begin with a plus or minus <em>sign</em>

section
  h2 <code>printf</code>
  hr

  p <code>%[flags][<mark>width</mark>][.precision]specifier</code>
  code <mark>int printf(const char *format, ...);</mark>

  br
  br
  ul
    li <code>width</code>
      ul
        li <em>minimum</em> field width
        li padded with spaces if it has fewer characters

section
  h2 <code>printf</code>
  hr

  p <code>%[flags][width][<mark>.precision</mark>]specifier</code>
  code <mark>int printf(const char *format, ...);</mark>

  br
  br
  ul
    li.fragment %d, %i: <em>minimum</em> number of digits
      ul
        li expanded with leading zeros when needed
    li.fragment %f, %e, %E: <em>number</em> of digits after '.'
      ul
        li default is $6$
    li.fragment %g, %G: <em>maximum</em> number of significant digits
    li.fragment %s: <em>maximum</em> number of characters

section
  h2 <code>scanf</code>
  hr

  br
  code <mark>int scanf(const char *format, ...);</mark>

  br
  br
  ul
    li <code>format</code>: format string (格式串)
    li <code>...</code>: variable argument list (可变长参数列表)

  //- br
  //- br
  //- p <code>scanf("%d%d", &c_score, &music_score);</code>

section
  h2 <code>scanf</code>
  hr

  br
  code <mark>int scanf(const char *format, ...);</mark>

  br
  br
  p The <code>format</code> string consists of
  ul
    li white-space characters
    li ordinary characters
      ul
        li neither % nor white-spaces
    li conversion specifications
      ul
        li each of which is introduced by %

section
  h2 <code>scanf</code>
  hr

  br
  code <mark>int scanf(const char *format, ...);</mark>

  br
  br
  ul
    li Scan the input stream from left to right
    li Identify expected items as long as possible

section
  h2 <code>scanf</code>
  hr

  br
  code <mark>int scanf(const char *format, ...);</mark>

  br
  br
  table
    thead
      tr
        th %specifier
        th Matched Item
        th Argument
    tbody
      tr.fragment
        td %d
        td skip white-spaces; matches an <code>int</code>
        td pointer to <code>int</code>
      tr.fragment
        td %le, %lf, %lg
        td skip white-spaces; matches a <code>double</code>
        td pointer to <code>double</code>
      tr.fragment
        td %e, %f, %g
        td skip white-spaces; matches a <code>float</code>
        td pointer to <code>float</code>

section
  h2 <code>scanf</code>
  hr

  //- code <mark>int scanf(const char *format, ...);</mark>

  table
    thead
      tr
        th %specifier
        th Matched Item
        th Argument
    tbody
      tr.fragment
        td %c
        td a character
        td pointer to a <code>char</code>
      tr.fragment
        td %s
        td a sequence of non-white-spaces
        td pointer to a <code>char</code> array
      tr.fragment
        td %[abc]
        td scanlist
        td pointer to a <code>char</code> array
      tr.fragment
        td %[^abc]
        td not in scanlist
        td pointer to a <code>char</code> array
      tr.fragment
        td %%
        td %
        td

section
  h2 <code>scanf</code>
  hr

  br
  p %[$\star$][width]specifier
  code <mark>int scanf(const char *format, ...);</mark>

  br
  br
  ul
    li.fragment $\star$: assignment-suppressing
    li.fragment width: <em>maximum</em> field width

//- section
//-   h2 <code>scanf</code>
//-   hr

//-   br
//-   p <code>scanf ("%[^\n]%*c", name)</code>

section
  h2 <code>scanf</code>
  hr

  br
  p "It is <mark>up to you</mark> to ensure that
  p the type of each actual argument pointer
  p <mark><em>matches</em></mark> the type expected by conversion specifiers."

section
  h2 References
  hr

  br
  br
  <a href = "https://en.cppreference.com/w/c/io/fprintf">printf @ cppreference</a>

  br
  br
  <a href = "https://en.cppreference.com/w/c/io/fscanf">scanf @ cppreference</a>

section
  h2 References
  hr

  br
  br
  p(class = "r-fit-text") Do not use <code>scanf</code>.
  p(class = "r-fit-text") Use $\dots$ instead.