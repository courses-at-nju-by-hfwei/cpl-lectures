/// <reference types="node" />
import { EventEmitter } from 'events';
import type puppeteer from 'puppeteer-core';
import TypedEmitter from 'typed-emitter';
import { ConvertType } from './converter';
import { File } from './file';
export declare namespace Preview {
    type Events = {
        close: (window: any) => void;
        exit: () => void;
        launch: () => void;
        open: (window: any, location: string) => void;
        opening: (location: string) => void;
    };
    interface Options {
        height: number;
        width: number;
    }
    interface Window extends EventEmitter {
        page: puppeteer.Page;
        close: () => Promise<void>;
        load: (uri: string) => Promise<void>;
    }
}
declare const Preview_base: new () => TypedEmitter<Preview.Events>;
export declare class Preview extends Preview_base {
    readonly options: Preview.Options;
    private puppeteerInternal;
    constructor(opts?: Partial<Preview.Options>);
    get puppeteer(): puppeteer.Browser | undefined;
    open(location: string): Promise<Preview.Window>;
    exit(): Promise<void>;
    private createWindowObject;
    private createWindow;
    private launch;
}
export declare function fileToURI(file: File, type: ConvertType): string;
export {};
