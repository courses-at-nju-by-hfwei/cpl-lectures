export declare type ResolveAnimationOptions = {
    type: 'incoming' | 'outgoing';
    backward?: boolean;
    duration?: string;
};
export declare type MarpTransitionData = {
    name: string;
    duration?: string;
    builtinFallback?: boolean;
};
export declare type MarpTransitionKeyframeSettings = {
    name: string;
    defaultDuration?: string;
};
export declare type MarpTransitionResolvableKeyframeSettings = Omit<MarpTransitionKeyframeSettings, 'name'>;
export declare type MarpTransitionKeyframes = Record<keyof typeof directions, Record<keyof typeof types, MarpTransitionKeyframeSettings | undefined>>;
export declare const _resetResolvedKeyframes: () => void;
export declare const _testElementAnimation: (elm: HTMLElement, callback: (ret: MarpTransitionResolvableKeyframeSettings | undefined) => void) => void;
declare const types: {
    readonly both: "";
    readonly outgoing: "outgoing-";
    readonly incoming: "incoming-";
};
declare const directions: {
    readonly forward: "";
    readonly backward: "-backward";
};
export declare const getMarpTransitionKeyframes: (transitionName: string, { builtinFallback }?: {
    builtinFallback?: boolean | undefined;
}) => Promise<Readonly<MarpTransitionKeyframes> | undefined>;
export declare const isMarpTransitionKeyframesEmpty: (keyframes: MarpTransitionKeyframes) => boolean;
export declare const prepareMarpTransitions: (...transitionNames: string[]) => Promise<void>;
export declare const resolveAnimationStyles: (keyframes: MarpTransitionKeyframes, opts: Omit<ResolveAnimationOptions, 'type'>) => readonly string[];
export declare const isTransitionData: (data: unknown) => data is MarpTransitionData;
export declare const parseTransitionData: (rawJSON: string | undefined) => MarpTransitionData | undefined;
export {};
