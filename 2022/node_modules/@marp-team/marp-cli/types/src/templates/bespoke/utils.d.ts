declare type LocationLike = Pick<Location, 'protocol' | 'host' | 'pathname' | 'hash' | 'search'>;
declare type QuerySetter = (...args: Parameters<History['pushState']>) => void;
export declare const ViewModeNormal = "";
export declare const ViewModePresenter = "presenter";
export declare const ViewModeNext = "next";
export declare const viewModes: readonly ["", "presenter", "next"];
export declare const classPrefix = "bespoke-marp-";
export declare const dataAttrPrefix: "data-bespoke-marp-";
export declare const generateURLfromParams: (params: URLSearchParams, { protocol, host, pathname, hash }?: LocationLike) => string;
export declare const getViewMode: () => "" | "presenter" | "next";
export declare const readQuery: (name: string) => string | null;
export declare const popQuery: (name: string) => string | null;
export declare const setQuery: (queries: Record<string, string | false | null | undefined>, opts?: {
    location?: LocationLike;
    setter?: QuerySetter;
}) => void;
export declare const setHistoryState: (state: Record<string, any>) => void;
export declare const setViewMode: () => void;
export declare const storage: {
    available: boolean;
    get: (key: string) => string | null;
    set: (key: string, value: string) => boolean;
    remove: (key: string) => boolean;
};
export declare const toggleAriaHidden: (element: HTMLElement, value: boolean) => void;
export {};
